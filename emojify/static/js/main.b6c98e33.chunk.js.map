{"version":3,"sources":["EmojifyInput.module.css","App.module.css","EmojifyInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","EmojifyInput","props","state","input","output","fetch","method","headers","Accept","body","JSON","stringify","message","this","replaceAll","response","json","setState","console","error","event","target","value","className","styles","root","Grid","container","spacing","item","xs","md","TextField","id","label","multiline","onChange","inputChange","rows","fullWidth","InputProps","readOnly","Button","variant","color","onClick","emojify","React","Component","App","theme","useMemo","createMuiTheme","palette","type","ThemeProvider","CssBaseline","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,KAAO,2BAA2B,UAAY,kC,mBCAhED,EAAOC,QAAU,CAAC,IAAM,mB,qOC4FTC,E,kDAjFb,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IACDC,MAAQ,CACXC,MAAO,8BACPC,OAAQ,IAJY,E,iMAUCC,MAAM,yCAA0C,CACnEC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,QAASC,KAAKX,MAAMC,MACjBW,WAAW,KAAM,SACjBA,WAAW,KAAM,a,cATpBC,E,gBAaaA,EAASC,O,OAAtBA,E,OACJH,KAAKI,SAAS,CACZb,OAAQY,EAAKJ,QACVE,WAAW,MAAO,MAClBA,WAAW,MAAO,Q,kDAGvBI,QAAQC,MAAR,M,kJAIQC,GACVP,KAAKI,SAAS,CACZd,MAAOiB,EAAMC,OAAOC,U,+BAId,IAAD,OACP,OACE,qBAAKC,UAAWC,IAAOC,KAAvB,SACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACJ,UAAWC,IAAOG,UAAWC,QAAS,EAAtD,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGR,UAAWC,IAAOK,KAA5C,SACE,cAACG,EAAA,EAAD,CACEC,GAAG,2BACHC,MAAM,QACNC,WAAS,EACTC,SAAU,SAAChB,GAAD,OAAW,EAAKiB,YAAYjB,IACtCkB,KAAM,GACNC,WAAW,EACXjB,MAAOT,KAAKX,MAAMC,UAGtB,cAACuB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGR,UAAWC,IAAOK,KAA5C,SACE,cAACG,EAAA,EAAD,CACEC,GAAG,2BACHC,MAAM,SACNC,WAAS,EACTG,KAAM,GACNC,WAAW,EACXjB,MAAOT,KAAKX,MAAME,OAClBoC,WAAY,CACVC,UAAU,OAIhB,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIP,UAAWC,IAAOK,KAArC,SACE,cAACa,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAAS,kBAAM,EAAKC,WAHtB,gC,GAtEeC,IAAMC,W,yBCgBlBC,MArBf,WACE,IAAMC,EAAQH,IAAMI,SAClB,kBACEC,YAAe,CACbC,QAAS,CACPC,KAAM,YAGZ,IAGF,OACE,eAACC,EAAA,EAAD,CAAeL,MAAOA,EAAtB,UACE,cAACM,EAAA,EAAD,IACA,qBAAKjC,UAAWC,IAAOiC,IAAvB,SACE,cAAC,EAAD,UCPOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b6c98e33.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"EmojifyInput_root__1W_xy\",\"container\":\"EmojifyInput_container__3IN6E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","import React, { ChangeEvent } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport styles from './EmojifyInput.module.css';\n\ntype State = {\n  input: string\n  output: string\n}\n\nclass EmojifyInput extends React.Component<object, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      input: \"Hello world this is a test!\",\n      output: \"\",\n    }\n  }\n\n  async emojify() {\n    try {\n      let response = await fetch('https://emojify.hamologist.com/emojify', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: this.state.input\n            .replaceAll('\\n', '\\\\\\\\n')\n            .replaceAll('\\r', '\\\\\\\\r'),\n        })\n      })\n\n      let json = await response.json();\n      this.setState({\n        output: json.message\n          .replaceAll('\\\\n', '\\n')\n          .replaceAll('\\\\r', '\\r')\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  inputChange(event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({\n      input: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className={styles.root}>\n        <Grid container className={styles.container} spacing={3}>\n          <Grid item xs={12} md={6} className={styles.item}>\n            <TextField\n              id=\"outlined-muliline-static\"\n              label=\"Input\"\n              multiline\n              onChange={(event) => this.inputChange(event)}\n              rows={12}\n              fullWidth={true}\n              value={this.state.input}\n            />\n          </Grid>\n          <Grid item xs={12} md={6} className={styles.item}>\n            <TextField\n              id=\"outlined-muliline-static\"\n              label=\"Output\"\n              multiline\n              rows={12}\n              fullWidth={true}\n              value={this.state.output}\n              InputProps={{\n                readOnly: true\n              }}\n            />\n          </Grid>\n          <Grid item xs={12} className={styles.item}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => this.emojify()}\n            >Emojify</Button>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default EmojifyInput;","import React from 'react';\nimport styles from './App.module.css';\nimport EmojifyInput from \"./EmojifyInput\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { CssBaseline } from \"@material-ui/core\";\n\nfunction App() {\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: 'dark',\n        },\n      }),\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={styles.app}>\n        <EmojifyInput />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}